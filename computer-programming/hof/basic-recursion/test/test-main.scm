(require "../src/main.scm")

(define (assert condition message)
  (if (not condition)
    (displayln "❌ Test failed:" message)
    (displayln "✅ Test passed")))

(displayln "Testing (! n)")
(assert (= (! 0) 0) "0! should be 0")
(assert (= (! 1) 1) "1! should be 1")
(assert (= (! 2) 2) "2! should be 2")
(assert (= (! 3) 6) "3! should be 6")
(assert (= (! 4) 24) "4! should be 24")
(assert (= (! 5) 120) "5! should be 120")
(assert (= (! 6) 720) "6! should be 720")
(assert (= (! 7) 5040) "7! should be 5040")
(assert (= (! 8) 40320) "8! should be 40320")
(assert (= (! 9) 362880) "9! should be 362880")
(assert (= (! 10) 3628800) "10! should be 3628800")

(displayln "Testing (is-palindrome? s)")
(assert (is-palindrome? "racecar") "Should be palindrome")
(assert (is-palindrome? "madam") "Should be palindrome")
(assert (is-palindrome? "level") "Should be palindrome")
(assert (is-palindrome? "rotor") "Should be palindrome")
(assert (is-palindrome? "deified") "Should be palindrome")
(assert (not (is-palindrome? "hello")) "Should not be palindrome")
(assert (not (is-palindrome? "world")) "Should not be palindrome")
(assert (not (is-palindrome? "openai")) "Should not be palindrome")
(assert (not (is-palindrome? "palindrome")) "Should not be palindrome")
(assert (not (is-palindrome? "scheme")) "Should not be palindrome")

(displayln "Testing (gcd a b)")
(assert (= (gcd 0 0) 0) "gcd(0, 0) should be 0")
(assert (= (gcd 0 5) 5) "gcd(0, 5) should be 5")
(assert (= (gcd 5 0) 5) "gcd(5, 0) should be 5")
(assert (= (gcd 1 1) 1) "gcd(1, 1) should be 1")
(assert (= (gcd 8 12) 4) "gcd(8, 12) should be 4")
(assert (= (gcd 54 24) 6) "gcd(54, 24) should be 6")
(assert (= (gcd 101 103) 1) "gcd(101, 103) should be 1 (both primes)")
(assert (= (gcd 48 18) 6) "gcd(48, 18) should be 6")
(assert (= (gcd 56 98) 14) "gcd(56, 98) should be 14")
(assert (= (gcd 270 192) 6) "gcd(270, 192) should be 6")

(displayln "Testing (my-filter predicate lst)")
(assert (eqv? (my-filter odd? (list 1 2 3 4 5)) (list 1 3 5)) "Should be filtered")
(assert (eqv? (my-filter even? (list 1 2 3 4 5 6)) (list 2 4 6)) "Should be filtered")
(assert (eqv? (my-filter (lambda (x) (> x 3)) (list 1 2 3 4 5)) (list 4 5)) "Should be filtered by lambda")
(assert (eqv? (my-filter (lambda (x) (= (% x 3) 0)) (list 1 2 3 4 5 6 7 8 9)) (list 3 6 9)) "Should be filtered by lambda for multiples of 3")
(assert (eqv? (my-filter (lambda (x) #f) (list 1 2 3 4 5)) '()) "Should return empty list since lambda always returns false")

(displayln "Testing (my-reduce reduction lst acc)")
(assert (= (my-reduce + '(1 2 3 4 5) 0) 15) "Sum of list should be 15")
(assert (= (my-reduce * '(1 2 3 4) 1) 24) "Product of list should be 24")
(assert (equal? (my-reduce string-append '("hello " "world" "!") "") "hello world!") "Should concatenate strings to 'hello world!'")
(assert (= (my-reduce (lambda (x acc) (+ 1 acc)) '(a b c d) 0) 4) "Should count the number of elements in the list")

(displayln "Testing (fib n)")
(assert (= (fib 1) 1) "fib(1) should be 1")
(assert (= (fib 2) 1) "fib(2) should be 1")
(assert (= (fib 3) 2) "fib(3) should be 2")
(assert (= (fib 4) 3) "fib(4) should be 3")
(assert (= (fib 5) 5) "fib(5) should be 5")
(assert (= (fib 6) 8) "fib(6) should be 8")
(assert (= (fib 7) 13) "fib(7) should be 13")
(assert (= (fib 8) 21) "fib(8) should be 21")
(assert (= (fib 9) 34) "fib(9) should be 34")
(assert (= (fib 10) 55) "fib(10) should be 55")
