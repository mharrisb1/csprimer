Please refer to README. This was just for not taking and fleshing out the idea.
Many things in this file are incorrect and fixed in the implementation.

Board overview
--------------

+---------+---------+---------+
|  \   /  |         |         |
|   \ /   |         |         |
|   / \   |         |         |
6---------7---------8---------+
|         |   ---   |         |
|         |  |   |  |         |
|         |   ---   |         |
3---------4---------5---------+
|         |         |         |
|         |         |         |
|         |         |         |
0---------1---------2---------+

+---------+---------+---------+---------+---------+---------+---------+---------+---------+
|         |         |  \   /  |         |   ---   |         |         |         |         |
|         |         |   \ /   |         |  |   |  |         |         |         |         |
|         |         |   / \   |         |   ---   |         |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+---------+---------+
     8         7         6         5         4         3         2         1         0

Winning subsets
---------------

1) [0, 1, 2]
2) [3, 4, 5]
3) [6, 7, 8]
4) [0, 3, 6]
5) [1, 4, 7]
6) [2, 5, 8]
7) [0, 4, 8]
8) [6, 4, 2]

Invariants
----------

- Win takes at least 5 moves
- Cannot be more than 9 moves
- Winning zone of moves will be from [5, 9]

Data structure
--------------

Using a 32-bit unsigned integer as the main memory structure, a single square
will be represented as 2 contiguous bytes like:

- `00` - for empty square
- `10` - for `O`
- `11` - for `X`

The MSB is a signaling bit allowing us to distinguish an empty square from one
in use. If the sequence `01` appears (which is the only remaining combination)
then the signaling bit allows us to ignore it and to treat it like any other
square.

The masks for this are:

- `0x2` - for `O` squares
- `0x3` - for `X` squares

This will take up 18 bits of the 32 bytes we have available.

Additionally, a move counter will be added that needs to count from [0, 9].

There will also be a 2-bits to mark which side the player chooses to play as and
whose turn it currently is. The MSB will be the current turn taker, and the LSB
will be the player's choice in side.

The remaining 8 bits will be flags indicating which winning subsets we can ignore.
For example, if both an `X` and an `O` are present in the left top to right bottom
diagonal winning subset then no player can win that way. We give this possibility
a grave marker to allow the program to skip checking for a win in this subset.
The grave marker will just be an on bit.

NOTE: We can determine a cat's game by using an XOR 0xFF on bytes [24, 31] and if
we get 0x0 then all grave markers have been flipped on. The reason we're not just
naively looking at the count and checking if that is 9, is you can reach a state
where no winning subsets are left prior to reaching the 9th move.

31             24  22     18     15                             0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\______________/\_/_/\______/\__________________________________/
  grave marks    ^ ^   count          game board state
                 | |_ player's choice
                 |_ current turn

Isolating a subset
------------------

To isolate a subset of the bits from the game board state bits we would just apply
a set of corresponding masks to a set of 3 squares on the board. For example,
to isolate the subset for squares {0, 3, 6} the masks would be {`0x3`, `0xC0`, `0x3000`}.

The pseudocode for that would be:

```
subset = 0
for mask in masks:
   subset &= (game_board & mask)
   subset << 2
```

Checking a subset
-----------------

A frequent procedure in the program will be checking a given subset. There are two
ways that subsets must be checked:

1. Check for win
2. Check to mark grave

To check for a win, an XOR operation is applied to a subset to check for either
a win for `X` or a win for `O`. A win would be indicated by the result of the XOR
being equal to 0. The masks are:

- `X` win -> `0x3F`
- `O` win -> `0x2A`

If a win is not indicated in a subset then we move on to check if the subset needs
to be marked with a grave marker. A grave marker is to be set if the Hamming weight
of the subset is greater than one and is not even. This is because any combination
of `X` and `O` squares will have an odd number of bits flipped on.

Example game
------------

Start (move 0)

0x0

   +---------+---------+---------+
   |         |         |         |
2  |         |         |         |
   |         |         |         |
   +---------+---------+---------+
   |         |         |         |
1  |         |         |         |
   |         |         |         |
   +---------+---------+---------+
   |         |         |         |
0  |         |         |         |
   |         |         |         |
   +---------+---------+---------+
        0         1         2

X goes first (move 1)

0xC40300

   +---------+---------+---------+
   |         |         |         |
2  |         |         |         |
   |         |         |         |
   +---------+---------+---------+
   |         |  \   /  |         |
1  |         |   \ /   |         |
   |         |   / \   |         |
   +---------+---------+---------+
   |         |         |         |
0  |         |         |         |
   |         |         |         |
   +---------+---------+---------+
        0         1         2

O goes next (move 2)

0x80C82300

   +---------+---------+---------+
   |   ---   |         |         |
2  |  |   |  |         |         |
   |   ---   |         |         |
   +---------+---------+---------+
   |         |  \   /  |         |
1  |         |   \ /   |         |
   |         |   / \   |         |
   +---------+---------+---------+
   |         |         |         |
0  |         |         |         |
   |         |         |         |
   +---------+---------+---------+
        0         1         2

X goes again (move 3)

0x84CCE300

   +---------+---------+---------+
   |   ---   |  \   /  |         |
2  |  |   |  |   \ /   |         |
   |   ---   |   / \   |         |
   +---------+---------+---------+
   |         |  \   /  |         |
1  |         |   \ /   |         |
   |         |   / \   |         |
   +---------+---------+---------+
   |         |         |         |
0  |         |         |         |
   |         |         |         |
   +---------+---------+---------+
        0         1         2

O goes again (move 4)

0x94D0E308

   +---------+---------+---------+
   |   ---   |  \   /  |         |
2  |  |   |  |   \ /   |         |
   |   ---   |   / \   |         |
   +---------+---------+---------+
   |         |  \   /  |         |
1  |         |   \ /   |         |
   |         |   / \   |         |
   +---------+---------+---------+
   |         |   ---   |         |
0  |         |  |   |  |         |
   |         |   ---   |         |
   +---------+---------+---------+
        0         1         2

X goes again (move 5)

0x9DD4E30B

   +---------+---------+---------+
   |   ---   |  \   /  |         |
2  |  |   |  |   \ /   |         |
   |   ---   |   / \   |         |
   +---------+---------+---------+
   |         |  \   /  |         |
1  |         |   \ /   |         |
   |         |   / \   |         |
   +---------+---------+---------+
   |  \   /  |   ---   |         |
0  |   \ /   |  |   |  |         |
   |   / \   |   ---   |         |
   +---------+---------+---------+
        0         1         2

O goes again (move 6)

0xDDDAE30B

   +---------+---------+---------+
   |   ---   |  \   /  |   ---   |
2  |  |   |  |   \ /   |  |   |  |
   |   ---   |   / \   |   ---   |
   +---------+---------+---------+
   |         |  \   /  |         |
1  |         |   \ /   |         |
   |         |   / \   |         |
   +---------+---------+---------+
   |  \   /  |   ---   |         |
0  |   \ /   |  |   |  |         |
   |   / \   |   ---   |         |
   +---------+---------+---------+
        0         1         2

X goes again (move 7)

0xDDDEE3CB

   +---------+---------+---------+
   |   ---   |  \   /  |   ---   |
2  |  |   |  |   \ /   |  |   |  |
   |   ---   |   / \   |   ---   |
   +---------+---------+---------+
   |  \   /  |  \   /  |         |
1  |   \ /   |   \ /   |         |
   |   / \   |   / \   |         |
   +---------+---------+---------+
   |  \   /  |   ---   |         |
0  |   \ /   |  |   |  |         |
   |   / \   |   ---   |         |
   +---------+---------+---------+
        0         1         2

O goes again (move 8)

0xDFE2E3CB

   +---------+---------+---------+
   |   ---   |  \   /  |   ---   |
2  |  |   |  |   \ /   |  |   |  |
   |   ---   |   / \   |   ---   |
   +---------+---------+---------+
   |  \   /  |  \   /  |   ---   |
1  |   \ /   |   \ /   |  |   |  |
   |   / \   |   / \   |   ---   |
   +---------+---------+---------+
   |  \   /  |   ---   |         |
0  |   \ /   |  |   |  |         |
   |   / \   |   ---   |         |
   +---------+---------+---------+
        0         1         2

X goes last (move 9)

0xDDDEE3CB

   +---------+---------+---------+
   |   ---   |  \   /  |   ---   |
2  |  |   |  |   \ /   |  |   |  |
   |   ---   |   / \   |   ---   |
   +---------+---------+---------+
   |  \   /  |  \   /  |   ---   |
1  |   \ /   |   \ /   |  |   |  |
   |   / \   |   / \   |   ---   |
   +---------+---------+---------+
   |  \   /  |   ---   |  \   /  |
0  |   \ /   |  |   |  |   \ /   |
   |   / \   |   ---   |   / \   |
   +---------+---------+---------+
        0         1         2

